import java.io.File;
import java.lang.reflect.Array;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.*;

public class MP1 {
	 Random generator;
    String userName;
    String inputFileName;
    
    public static class sortpair implements Comparable<sortpair> {
        
        public int count;
        public String str;
        public sortpair(int a, String c)
            {
            this.count =a;
            this.str =c;
            
        }
    @Override
    public int compareTo(sortpair o) {
           return count < o.count ? -1 : count <o.count ? 1 :0;
            
       
    }   
    }
    List<sortpair> list = new ArrayList<sortpair>();
    HashMap<String, sortpair> hashmap = new HashMap<String,sortpair>();
    String delimiters = " \t,;.?!-:@\\[\\]\\(\\)\\{\\}\\_*/";
    String[] stopWordsArray = {"i", "me", "my", "myself", "we", "our", "ours", "ourselves", "you", "your", "yours",
            "yourself", "yourselves", "he", "him", "his", "himself", "she", "her", "hers", "herself", "it", "its",
            "itself", "they", "them", "their", "theirs", "themselves", "what", "which", "who", "whom", "this", "that",
            "these", "those", "am", "is", "are", "was", "were", "be", "been", "being", "have", "has", "had", "having",
            "do", "does", "did", "doing", "a", "an", "the", "and", "but", "if", "or", "because", "as", "until", "while",
            "of", "at", "by", "for", "with", "about", "against", "between", "into", "through", "during", "before",
            "after", "above", "below", "to", "from", "up", "down", "in", "out", "on", "off", "over", "under", "again",
            "further", "then", "once", "here", "there", "when", "where", "why", "how", "all", "any", "both", "each",
            "few", "more", "most", "other", "some", "such", "no", "nor", "not", "only", "own", "same", "so", "than",
            "too", "very", "s", "t", "can", "will", "just", "don", "should", "now"};

    void initialRandomGenerator(String seed) throws NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA");
        messageDigest.update(seed.toLowerCase().trim().getBytes());
        byte[] seedMD5 = messageDigest.digest();

        long longSeed = 0;
        for (int i = 0; i < seedMD5.length; i++) {
            longSeed += ((long) seedMD5[i] & 0xffL) << (8 * i);
        }

        this.generator = new Random(longSeed);
    }

    Integer[] getIndexes() throws NoSuchAlgorithmException {
        Integer n = 10000;
        Integer number_of_lines = 50000;
        Integer[] ret = new Integer[n];
        this.initialRandomGenerator(this.userName);
        for (int i = 0; i < n; i++) {
            ret[i] = generator.nextInt(number_of_lines);
        }
        return ret;
    }

    public MP1(String userName, String inputFileName) {
        this.userName = userName;
        this.inputFileName = inputFileName;
    }

    public String[] process() throws Exception {
        String[] ret = new String[20];
       File input = new File(inputFileName);
       
       Scanner sc = new Scanner(input);
       String read;
       Integer [] indexarray = new Integer[10000];
       indexarray = getIndexes();
       while(sc.hasNextLine())
       {read = sc.nextLine();
      // System.out.println(read);
    	   String [] linearray = read.split(delimiters);
    	   for(String s: linearray)
    	   {
    		   for(String stpword : stopWordsArray)
    		   {
    			   if(!s.equals(stpword))
    			   {
    				   if(!hashmap.containsKey(s))
    				   {
    					 sortpair sp = new sortpair(1,s);
    					 hashmap.put(s,sp);
    					}else{
    						sortpair sp = (sortpair)hashmap.get(s);
    						sp.count++;
    						hashmap.put(s,sp);
    					}
    				   
    			   }
    			}
    	   }
    	   
       }
       for (Map.Entry<String, sortpair> entry : hashmap.entrySet()) {
    	    sortpair value = (sortpair)entry.getValue();
    	    list.add(value);
    	}
       
       Collections.sort(list);
       int k =0;
       for(sortpair sp : list)
       {
    	   ret[k] = sp.str;
    	   if(k == 19)
    		   break;
    	   k++;
       }
       
       return ret;
    }

    public static void main(String[] args) throws Exception {
        if (args.length < 1){
            System.out.println("MP1 <User ID>");
        }
        else {
            String userName = args[0];
            String inputFileName = "./input.txt";
            MP1 mp = new MP1(userName, inputFileName);
            String[] topItems = mp.process();
            for (String item: topItems){
                System.out.println(item);
            }
        }
    }
}
